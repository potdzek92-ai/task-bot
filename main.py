import os
import logging
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, timedelta
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
PORT = int(os.environ.get('PORT', 8443))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS daily_tasks
                 (id INTEGER PRIMARY KEY, time TEXT, task TEXT)''')
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
    c.execute("SELECT COUNT(*) FROM daily_tasks")
    if c.fetchone()[0] == 0:
        daily_tasks = [
            ("07:00", "–£—Ç–æ—á–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É —à—Ç–∞–±–∞ –ø–æ–ª–∫–∞"),
            ("07:30", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –æ—Ç –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –ø–æ–ª–∫–∞"),
            ("09:00", "–û—Ç—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á"),
            ("16:00", "–†–∞–±–æ—Ç–∞ —Å–æ –≤—Ö–æ–¥—è—â–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π"),
            ("17:50", "–ü—Ä–∏–µ–º –¥–æ–∫–ª–∞–¥–∞ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤ —Å–ª—É–∂–±, –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–π"),
            ("18:00", "–í–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –ù–® 18–û–ê"),
            ("19:20", "–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã –¥–µ–∂—É—Ä–Ω—ã—Ö –ø–æ –ö–ü, –ì–û–ü, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π —Å—Ç–æ—è—â–∏—Ö –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ"),
            ("20:00", "–ó–∞—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤ (–ù–®) –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –Ω–æ—á–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º")
        ]
        
        for time, task in daily_tasks:
            c.execute("INSERT INTO daily_tasks (time, task) VALUES (?, ?)", (time, task))
    
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ –¥–∞—Ç—É
def get_tasks_for_date(date):
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    
    day_names = ["–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]
    day_name = day_names[date.weekday()]
    
    message = f"üéñÔ∏è –ó–ê–î–ê–ß–ò –ù–ê {date.strftime('%d.%m.%Y')} ({day_name.upper()})\n\n"
    
    c.execute("SELECT time, task FROM daily_tasks ORDER BY time")
    daily_tasks = c.fetchall()
    
    message += "üìÖ –ï–ñ–ï–î–ù–ï–í–ù–´–ï:\n"
    for time, task in daily_tasks:
        message += f"üïê {time} - {task}\n"
    
    conn.close()
    return message

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    keyboard = [
        ["üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üìã –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"],
        ["üë®‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–ª—É–∂–µ–±–Ω—ã—Ö –∑–∞–¥–∞—á\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    text = update.message.text
    
    if text == "üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        tasks = get_tasks_for_date(datetime.now())
        await update.message.reply_text(tasks)
    
    elif text == "üìã –ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
        tomorrow = datetime.now() + timedelta(days=1)
        tasks = get_tasks_for_date(tomorrow)
        await update.message.reply_text(tasks.replace("–ó–ê–î–ê–ß–ò –ù–ê", "–ó–ê–î–ê–ß–ò –ù–ê –ó–ê–í–¢–†–ê"))
    
    elif text == "üë®‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
        await update.message.reply_text("üë®‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    if ADMIN_ID == 0:
        logger.error("‚ùå ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–ª—è Render –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
    if 'RENDER' in os.environ:
        webhook_url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{BOT_TOKEN}"
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=webhook_url
        )
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)!")
        application.run_polling()

if __name__ == "__main__":
    main()
